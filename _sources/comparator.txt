Comparator
==========

.. include:: build_stopeight.txt

API Access
----------

This example uses the :mod:`stopeight-clibs-legacy` as a frontend and sample data. Please refer to :doc:`stroke-analyzer` on how to install and use them.

This attempts to load all the files with ".sp" extension::

    $ cd /path/to/where/stopeight
    >>> from stopeight.tests import parser
    >>> lines = parser.parse_directory('/path/to/where/extracted/sample/data')

The :mod:`stopeight.multiprocessing.pooling` makes parallel calls to :mod:`stopeight.comparator`.
Note: The IDLE shell does not support spawning. Run from a Python shell instead::

    >>> from stopeight.multiprocessing import pooling
    >>> comparator = pooling.MPLine(lines)

.. autoclass:: stopeight.comparator.shapeMatchSubSection.ShapeMatchSubSectionClass

   .. automethod:: ShapeMatchSubSectionClass.match

   Note: This includes a check for occurences in reverse order.

It tests every line against the whole dataset and itself::

    >>> for i,line in enumerate(lines):
    >>>     matches = comparator.matchLine(line)
    >>>     print('Line '+str(i)+' matched '+str(len(matches))+' occurences '+str(matches))
